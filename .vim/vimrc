"" general
set nocompatible
set autowrite
set nomodeline
set modelines=0
set hidden
set background=dark
set wrap
set nobackup
set swapfile
set notitle
set nostartofline
set mouse=
set noerrorbells
set undolevels=5000
set history=250
set report=0
set nrformats-=octal
set fileformats=unix,dos,mac
set backspace=indent,eol,start
set browsedir=current
set listchars=tab:>.,trail:.,eol:$,precedes:>,extends:<,nbsp:Â·
set formatoptions=croql
set viminfo='100,<500,s100,h,n~/.vim/viminfo
set path=.,**
syntax on
filetype plugin indent on

"" line numbers
set number
set relativenumber

" cursorline
set cursorline

"" encoding
set encoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,default,latin1

"" indent
set autoindent
set smartindent

"" tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab

"" search
set hlsearch
set incsearch
set wrapscan
set ignorecase
set smartcase

"" status line
set laststatus=2

"" last line
set showmode
set showcmd

"" enhanced command-line completion
set wildmenu
set wildmode=longest,list:longest,list:full

"" netrw
" disable generation of .netrwhist
let g:netrw_dirhistmax = 0
" tree style listing
let g:netrw_liststyle = 3

"" split window
set splitright
set splitbelow

"" clipboard
" "* register: X PRIMARY selection
" "+ register: X CLIPBOARD selection
if has("clipboard")
    set clipboard=exclude:cons\|linux
endif

"" printing
set printheader=%<%t%h%m\ <%L>\ %{strftime('%Y-%m-%dT%H:%M:%S%z')}%=Page\ %N

"" highlights
" todo/fixme comments
highlight Todo ctermfg=black ctermbg=cyan
" tab character
highlight TabChar ctermbg=darkgray
" unwanted whitespaces
highlight UnwantedWhitespace ctermbg=red
" line numbers
highlight clear CursorLine
highlight LineNr ctermfg=grey
highlight CursorLineNR cterm=bold ctermfg=yellow

"" autocmds
" close help page with <F1>
autocmd FileType help nnoremap <buffer> <F1> :q<CR>
" use :help in vim files for 'K' command
autocmd FileType vim setlocal keywordprg=:help
" resize splits when window is resized
autocmd VimResized * wincmd =
" jump to the last known position in a file just after opening it
autocmd BufReadPost * if !&diff && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" enable spell check for some file types
autocmd FileType tex,mail,human,html,xhtml,gitcommit,svn silent! call SpellToggle()
" disable paste mode when leaving insert mode
autocmd InsertLeave * set nopaste
" highlight tab chars
autocmd BufWinEnter * call matchadd("TabChar" , '\t')
" set textwidth
autocmd Filetype text,human set textwidth=78
" highlight unwanted white spaces
autocmd BufWinEnter * call matchadd("UnwantedWhitespace", '\s\+$\| \+\ze\t')
" disable relative line numbers in insert mode and inactive windows
autocmd WinEnter,InsertLeave * if &number | set relativenumber | endif
autocmd WinLeave,InsertEnter * if &number | set norelativenumber | endif

"" abbreviations
iab _DATE        <C-R>=strftime("%Y-%m-%d")<CR>
iab _TIME        <C-R>=strftime("%H:%M:%S")<CR>
iab _HM          <C-R>=strftime("%H%M")<CR>
iab _UNIX        <C-R>=strftime("%s")<CR>
iab _ISO         <C-R>=strftime("%Y-%m-%dT%H:%M:%S%z")<CR>
iab _RFC         <C-R>=strftime("%a, %d %b %Y %H:%M:%S %z")<CR>
iab _~           Hannes von Haugwitz

"" mappings
" paste toggle
set pastetoggle=<F2>
" git gutter toggle
noremap <silent><F3> :GitGutterToggle<CR>
imap    <silent><F3> <ESC><F3>a
" toggle line numbers
noremap <silent><F4> :set invnu invrnu<CR>
imap    <silent><F4> <ESC><F4>a
" gundo toggle
nnoremap <silent><F5> :GundoToggle<CR>
" auto indenting toggle
noremap <silent><F7> :call AutoIndentingToggle()<CR>
imap    <silent><F7> <ESC><F7>a
function! AutoIndentingToggle()
        if exists('b:oldindent')
            let &l:autoindent=b:oldindent[0]
            let &l:cindent=b:oldindent[1]
            let &l:smartindent=b:oldindent[2]
            let &l:indentexpr=b:oldindent[3]
            unlet b:oldindent
            echo "auto indenting re-enabled"
        else
            let b:oldindent=[ &autoindent, &cindent, &smartindent, &indentexpr ]
            setlocal noautoindent nocindent nosmartindent indentexpr=
            echo "auto indenting disabled"
        endif
endfunction
" focus tagbar
nnoremap <silent><F8> :TagbarOpen fjc<CR>
" ale checker toggle
noremap <silent><F9> ::ALEToggleBuffer<CR>
imap    <silent><F9> <ESC><F9>a
" toggle spell
noremap <silent><F10> :call SpellToggle()<CR>
imap    <silent><F10> <ESC><F10>a
" toggle list mode
noremap <silent><F12> :set invlist<CR>
imap    <silent><F12> <ESC><F12>a

" go to previous/next file
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" go to previous/next buffer
nnoremap <silent>[b :bprevious<CR>
nnoremap <silent>]b :bnext<CR>
" display previous/next error of the quickfix list
nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
" display previous/next error of the location list
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>

" append single char without leaving normal mode
nnoremap <silent><LEADER>a :exec "normal a".nr2char(getchar())."\e"<CR>
" find file and :edit it
noremap <LEADER>e :find<Space>
" insert single char without leaving normal mode
nnoremap <silent><LEADER>i :exec "normal i".nr2char(getchar())."\e"<CR>
" make file path directories as needed
noremap <LEADER>M :! mkdir -pv %:h<CR>
" display the contents of all numbered and named registers
noremap <silent><LEADER>r :registers<CR>
" replace <tab> characters with white spaces
noremap <silent><LEADER>R :retab<CR>
" find file and :sp it
noremap <LEADER>s :sfind<Space>
" sort lines based on visual selected block
noremap <LEADER>S :'<,'>sort /\ze\%V/<CR>
" find file and :tabedit it
noremap <LEADER>t :tabfind<Space>
" find file and :vsp it
noremap <LEADER>v :vert sfind<Space>
" tagbar toggle
nnoremap <silent><LEADER><F8> :TagbarToggle<CR>
" turn off highlight matches for current search pattern
nnoremap <silent><LEADER>/ :nohls<CR>
" repeat last :!{cmd}
nnoremap <LEADER>! :!!<CR>
" remove trailing white spaces
noremap <silent><LEADER><SPACE> :call DeleteTrailingWhitespaces()<CR>
function! DeleteTrailingWhitespaces()
    let cursor_position = getpos(".")
    execute '%substitute/\s\+$//e'
    call histdel('search', -1) "see also :help function-search-undo
    call setpos('.', cursor_position)
endfunction

" text-object for line without new line character
vnoremap <silent>al :<C-U>normal! 0v$h<CR>
omap <silent>al :normal val<CR>
" text-object for line without surrounding spaces and new line character
vnoremap <silent>il :<C-U>normal! ^vg_<CR>
omap <silent>il :normal vil<CR>

"" spell
set sps=best,10
let spelllangs = ["en", "de"]
function! SpellToggle()
    if !exists('b:langidx') | let b:langidx = 0 | endif
    if b:langidx == len(g:spelllangs)
        setlocal nospell
        echo "nospell"
        let b:langidx = 0
    else
        let &l:spelllang=g:spelllangs[b:langidx]
        setlocal spell
        echo "spell: " . &spelllang
        let b:langidx = (b:langidx+1)
    endif
endfunction

"" local vim options
if filereadable(expand("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif

"" airline options
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

"" gundo options
let g:gundo_width = 60
let g:gundo_preview_height = 30
let g:gundo_prefer_python3 = 1

"" ale options
let g:ale_open_list = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 1
autocmd FileType perl let b:ale_enabled = 0

"" easytags options
let g:easytags_auto_update = 0
let g:easytags_auto_highlight = 0
let g:easytags_file = '~/.vim/tags'
let g:easytags_include_members = 1
au! BufRead,BufEnter ~/src/** let b:easytags_auto_update=1 | let b:easytags_auto_highlight=1
